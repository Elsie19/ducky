#!/bin/bash
set -eu
shopt -s gnu_errfmt

INPUT="${1}"
unset vars
# associative arrays go brr
declare -A vars

while IFS= read -r line; do
	# yoinks comments
	if [[ "${line}" =~ ^#* ]]; then
		true
	fi
	# print statement
	if [[ "${line}" =~ ^print ]]; then
		# if line contains a {}, which means a variable is used
		if grep '{' <<< "${line}" >/dev/null 2>&1; then
			# match for both {}
			if grep -vE '{.*}' <<< "${line}" 2>/dev/null; then
				printf '%s\n' "ERROR: Line ($line) does not contain matching paranthese"
				exit 1
			else
				# first get the actual variable names
				mapfile -t variable_names < <(grep --color=none -oP '(?<={).*?(?=})' <<< "${line}")
				looped_line="${line}"
				for i in "${variable_names[@]}"; do
					looped_line=$(sed "s/{$i}/${vars[$i]}/g" <<< $looped_line)
				done
				printf '%s\n' "${looped_line#print }"
			fi
		else
			# normal print statement
			printf '%s\n' "${line#print }"
		fi
	fi

	if [[ "${line}" =~ ^var ]]; then
		key="$(echo "$line" | awk '{print $2}')"
		value="$(echo "$line" | awk '{print $3}')"
		vars[${key}]=${value}
		unset key value
	fi

done < "${INPUT}"
