#!/bin/bash
set -e
shopt -s gnu_errfmt
export LC_ALL=C
bold="$(tput bold)"
normal="$(tput sgr0)"

INPUT="${1:?}"

unset vars
# associative arrays go brr
declare -A vars

function first_word() {
	local word=($1)
	echo "${word[0]}"
	unset word
}

function errorfmt() {
	printf '%s\n' "ERROR: $*"
}

function print() {
	if [[ "${line}" == *"{"* ]]; then
			# match for both {}
			if grep --color=none -vE '{.*}' <<< "${line}" 2>/dev/null; then
				errorfmt "Line does not contain an equal number of brackets"
				exit 1
			else
				# first get the actual variable names
				mapfile -t variable_names < <(grep --color=none -oP '(?<={).*?(?=})' <<< "${line}")
				looped_line="${line}"
				for i in "${variable_names[@]}"; do
					looped_line="$(sed "s/{$i}/${vars[$i]}/g" <<< "${looped_line}")"
				done
				printf '%s\n' "${looped_line#print }"
				unset variable_names looped_line
			fi
	else
		# normal print statement
		printf '%s\n' "${line#print }"
	fi
}

function var() {
	key="$1"
	value="$2"
	vars["${key}"]="${value}"
	unset key value tmp_line
}

function unset_var() {
	unset -v "vars[$*]"
}
keys=('#' 'print' 'var' 'unset')
while IFS= read -r line; do
	# get first key in line: "foo bar baz" -> "foo"
	value="${line%% *}"
	# if line does not contain value and value is not empty (newline), error out
	if [[ ! " ${keys[*]} " =~ " ${value} " ]] && [[ ! ${value:-null} == null ]]; then
		errorfmt "(${bold}$line${normal}) is not a valid command"
		exit 1
	fi
	# yoinks comments
	if [[ "${line}" =~ ^#* ]]; then
		true
	fi
	# print statement
	if [[ "$(first_word $line)" == "print" ]]; then
		print "${line#print }"
	fi
	if [[ "$(first_word $line)" == "var" ]]; then
		var "$(awk '{print $2}' <<< "${line}")" "$(awk '{print $3}' <<< "${line}")"
	fi
	if [[ "$(first_word $line)" == "unset" ]]; then
		unset_var "${line#unset }"
	fi
done < "${INPUT}"

# cleanup
unset -f vars
unset -v INPUT
